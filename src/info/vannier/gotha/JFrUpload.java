/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package info.vannier.gotha;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Luc
 */
public class JFrUpload extends javax.swing.JFrame {
    private TournamentInterface tournament;

    /**
     * Creates new form Upload
     */
    public JFrUpload() {
        initComponents();
    }
    public JFrUpload(TournamentInterface tournament) throws RemoteException {
        this.tournament = tournament;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpload = new javax.swing.JButton();
        txtOrig = new javax.swing.JTextField();
        txtShrinked = new javax.swing.JTextField();
        btnShrink = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpload);
        btnUpload.setBounds(42, 25, 120, 23);

        txtOrig.setText("jTextField1");
        getContentPane().add(txtOrig);
        txtOrig.setBounds(240, 30, 110, 20);

        txtShrinked.setText("jTextField2");
        getContentPane().add(txtShrinked);
        txtShrinked.setBounds(240, 110, 110, 20);

        btnShrink.setText("shrink");
        btnShrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShrinkActionPerformed(evt);
            }
        });
        getContentPane().add(btnShrink);
        btnShrink.setBounds(240, 70, 120, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
	final String charset = "UTF-8";
        final String CRLF = "\r\n"; // Line separator required by multipart/form-data.
       
        String tournamentShortName = null;        
        String tournamentFileName = null;        
        try {
            tournamentShortName = tournament.getShortName();
            tournamentFileName = tournamentShortName;
        } catch (RemoteException ex) {
            Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
        }
        File tournamentFile = new File(Gotha.runningDirectory, "tournamentfiles/work/" + tournamentFileName + ".xml"); // original tournament file
        String shrinkedShortName = shrinkedString(tournamentShortName);
        String targetURL = "http://opengotha.info/upload.php";
        
        Date beginDate = null;
        try {
            beginDate = tournament.getTournamentParameterSet().getGeneralParameterSet().getBeginDate();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
        }
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        String strBeginDate = dateFormat.format(beginDate);
        Date currentDate = Calendar.getInstance().getTime();
        dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        String strCurrentDate = dateFormat.format(currentDate);

	URL url;
        URLConnection connection = null;
        OutputStream output;
        PrintWriter writer;

        try {
            url = new URL(targetURL);
            connection = url.openConnection(); 
            connection.setDoOutput(true);
            output = connection.getOutputStream(); 
            writer = new PrintWriter(new OutputStreamWriter(output, charset), true);
            writer.append("postcontent=").append(CRLF);
            writer.append("shrinkedshortname:" + shrinkedShortName + ";").append(CRLF);
            writer.append("begindate:" + strBeginDate + ";").append(CRLF);
            writer.append("currentdate:" + strCurrentDate + ";").append(CRLF);
            writer.append("filecontent:").append(CRLF);
//            Files.copy(tournamentFile.toPath(), output);
            List<String> lst = null;
            try {
                lst = Files.readAllLines(tournamentFile.toPath());
            } catch (IOException ex) {
                Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String s : lst){
//                System.out.println("s = " + s);
                writer.append(s).append(CRLF);

            }
            
            output.flush(); // Important before continuing with writer!
            writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.
        } catch (MalformedURLException ex) {
            Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
        // Get Response
        System.out.println("Get Response");
        StringBuffer response = null;
        try {
            BufferedReader in = new BufferedReader(
                new InputStreamReader(connection.getInputStream()));
            String inputLine;
            response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
                response.append("\n");
            }

            in.close();
        } catch (IOException ex) {
            Logger.getLogger(JFrUpload.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(response.toString());
		
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnShrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShrinkActionPerformed
        String str = txtOrig.getText();
        String strShrinked = this.shrinkedString(str);
        txtShrinked.setText(strShrinked);
    }//GEN-LAST:event_btnShrinkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShrink;
    private javax.swing.JButton btnUpload;
    private javax.swing.JTextField txtOrig;
    private javax.swing.JTextField txtShrinked;
    // End of variables declaration//GEN-END:variables

    // Eliminate undesirable characters
    private String shrinkedString(String str) {
       String shrinkedStr = str.replaceAll("[^A-Za-z0-9.-]", "");
       return shrinkedStr;     
    }
}
